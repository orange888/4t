{"version":3,"sources":["components/Body.js","components/Header.js","components/Timer.js","components/Control.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Body","StyledBody","this","props","children","Component","styled","div","Header","StyledHeader","title","subtitle","Timer","showNotifications","bind","handleClick","state","count","time","running","notificationsEnabled","n","supported","show","event","close","target","tag","context","AudioContext","beep","soundEnabled","o","createOscillator","g","createGain","start","frequency","value","connect","destination","gain","exponentialRampToValueAtTime","currentTime","setTimeout","setState","timer","setInterval","newCount","seconds","minutes","Math","floor","toString","length","StyledTimer","format","onRef","ref","body","icon","onClick","Control","StyledControl","type","name","id","className","onChange","changeSettings","checked","isEnabled","htmlFor","data-off","labelOff","data-on","labelOn","Footer","StyledFooter","App","isChecked","returnObject","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9255e1fd.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport styled from 'styled-components'\n\nclass Body extends Component {\n  render () {\n    return <StyledBody>{this.props.children}</StyledBody>\n  }\n}\n\nconst StyledBody = styled.div`\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-evenly;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`\n\nexport default Body\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\n\nclass Header extends Component {\n  render () {\n    return (\n      <StyledHeader>\n        <h1>{this.props.title}</h1>\n        <h2>{this.props.subtitle}</h2>\n      </StyledHeader>\n    )\n  }\n}\n\nconst StyledHeader = styled.div`\n  text-align: center;\n  color: #ddd;\n  h1 {\n    padding-bottom: 0;\n    margin-bottom: 0;\n    font-size: 6rem;\n    text-decoration: underline;\n  }\n  h2 {\n    padding-top: 0;\n    margin-top: 0;\n    font-size: 1.2rem;\n  }\n`\n\nexport default Header\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport ReactNotifications from 'react-browser-notifications'\n\nclass Timer extends Component {\n  constructor (props) {\n    super(props)\n    this.showNotifications = this.showNotifications.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n    this.state = {\n      count: this.props.time,\n      running: false\n    }\n  }\n\n  showNotifications () {\n    if (this.props.notificationsEnabled) {\n      if (this.n.supported()) this.n.show()\n    }\n  }\n\n  handleClick (event) {\n    this.n.close(event.target.tag)\n  }\n\n  componentWillMount () {\n    const context = new AudioContext()\n    const beep = () => {\n      if (this.props.soundEnabled) {\n        let o = context.createOscillator()\n        let g = context.createGain()\n        o.start(0)\n        o.frequency.value = 830.6\n        o.connect(g)\n        g.connect(context.destination)\n        g.gain.exponentialRampToValueAtTime(0.0001, context.currentTime + 0.1)\n      }\n    }\n    if (!this.state.running) {\n      setTimeout(() => {\n        this.showNotifications()\n        beep()\n      }, 1)\n      this.setState({ running: true })\n      this.timer = setInterval(() => {\n        if (this.state.count < 1) {\n          this.setState({ count: this.props.time })\n          this.showNotifications()\n          beep()\n        }\n        const newCount = this.state.count - 1\n        this.setState({ count: newCount >= 0 ? newCount : 0 })\n      }, 1000)\n    }\n  }\n\n  format (time) {\n    let seconds = time % 60\n    let minutes = Math.floor(time / 60)\n    minutes = minutes.toString().length === 1 ? '0' + minutes : minutes\n    seconds = seconds.toString().length === 1 ? '0' + seconds : seconds\n    return minutes + ':' + seconds\n  }\n\n  render () {\n    const { count } = this.state\n    return (\n      <StyledTimer>\n        {this.format(count)}\n        <ReactNotifications\n          onRef={ref => (this.n = ref)}\n          title='Rest Your Eyes!'\n          body='Focus on something 20 feet away for 20 seconds.'\n          icon='/favicon.ico'\n          tag='restYourEyes'\n          onClick={event => this.handleClick(event)}\n        />\n      </StyledTimer>\n    )\n  }\n}\n\nconst StyledTimer = styled.div`\n  text-align: center;\n  font-size: 10rem;\n  padding-bottom: 3rem;\n  color: #ddd;\n`\n\nexport default Timer\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\n\nclass Control extends Component {\n\n  render (props) {\n    return (\n      <StyledControl>\n        <input\n          type='checkbox'\n          name={this.props.name}\n          id={this.props.name}\n          className='ios-toggle'\n          onChange={event => this.props.changeSettings(event)}\n          checked={ this.props.isEnabled ? 'checked' : '' }\n        />\n        <label\n          htmlFor={this.props.name}\n          className='checkbox-label'\n          data-off={this.props.labelOff}\n          data-on={this.props.labelOn}\n        />\n      </StyledControl>\n    )\n  }\n}\n\nconst StyledControl = styled.div`\n  width: 60px;\n  text-align: center;\n  padding: 1rem;\n  *,\n  *:before,\n  *:after {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n    /*transition*/\n    -webkit-transition: 0.25s ease-in-out;\n    -moz-transition: 0.25s ease-in-out;\n    -o-transition: 0.25s ease-in-out;\n    transition: 0.25s ease-in-out;\n    outline: none;\n    font-family: Helvetica Neue, helvetica, arial, verdana, sans-serif;\n  }\n\n  input[type='checkbox'] {\n    display: none;\n  }\n\n  body {\n    background: #ddd;\n  }\n  .ios-toggle,\n  .ios-toggle:active {\n    position: absolute;\n    top: -5000px;\n    height: 0;\n    width: 0;\n    opacity: 0;\n    border: none;\n    outline: none;\n  }\n  .checkbox-label {\n    display: block;\n    position: relative;\n    font-size: 1.2rem;\n    width: 100%;\n    height: 36px;\n    /*border-radius*/\n    -webkit-border-radius: 18px;\n    -moz-border-radius: 18px;\n    border-radius: 18px;\n    background: #ddd;\n    cursor: pointer;\n  }\n  .checkbox-label:before {\n    content: '';\n    display: block;\n    position: absolute;\n    z-index: 1;\n    line-height: 34px;\n    text-indent: 40px;\n    height: 36px;\n    width: 36px;\n    /*border-radius*/\n    -webkit-border-radius: 100%;\n    -moz-border-radius: 100%;\n    border-radius: 100%;\n    top: 0px;\n    left: 0px;\n    right: auto;\n    background: #ddd;\n    /*box-shadow*/\n    -webkit-box-shadow: 0 3px 3px rgba(0, 0, 0, 0.2), 0 0 0 2px #dddddd;\n    -moz-box-shadow: 0 3px 3px rgba(0, 0, 0, 0.2), 0 0 0 2px #dddddd;\n    box-shadow: 0 3px 3px rgba(0, 0, 0, 0.2), 0 0 0 2px #dddddd;\n  }\n  .checkbox-label:after {\n    content: attr(data-off);\n    display: block;\n    position: absolute;\n    z-index: 0;\n    top: 0;\n    left: -300px;\n    padding: 10px;\n    height: 100%;\n    width: 300px;\n    text-align: right;\n    color: #bfbfbf;\n    white-space: nowrap;\n  }\n  .ios-toggle:checked + .checkbox-label {\n    /*box-shadow*/\n    -webkit-box-shadow: inset 0 0 0 20px rgba(19, 191, 17, 1),\n      0 0 0 2px rgba(19, 191, 17, 1);\n    -moz-box-shadow: inset 0 0 0 20px rgba(19, 191, 17, 1),\n      0 0 0 2px rgba(19, 191, 17, 1);\n    box-shadow: inset 0 0 0 20px rgba(19, 191, 17, 1),\n      0 0 0 2px rgba(19, 191, 17, 1);\n  }\n  .ios-toggle:checked + .checkbox-label:before {\n    left: calc(100% - 36px);\n    /*box-shadow*/\n    -webkit-box-shadow: 0 0 0 2px transparent, 0 3px 3px rgba(0, 0, 0, 0.3);\n    -moz-box-shadow: 0 0 0 2px transparent, 0 3px 3px rgba(0, 0, 0, 0.3);\n    box-shadow: 0 0 0 2px transparent, 0 3px 3px rgba(0, 0, 0, 0.3);\n  }\n  .ios-toggle:checked + .checkbox-label:after {\n    content: attr(data-on);\n    left: 60px;\n    width: 36px;\n  }\n`\n\nexport default Control\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\n\nclass Footer extends Component {\n  render () {\n    return (\n      <StyledFooter>\n        <p>\n          To promote eye health and combat computer vision syndrome, use this\n          timer to remind you to follow to 20-20-20 rule.\n        </p>\n        <p>Every 20 minutes focus on something 20 feet away for 20 seconds.</p>\n      </StyledFooter>\n    )\n  }\n}\n\nconst StyledFooter = styled.div`\n  text-align: center;\n  font-size: 1.6rem;\n  max-width: 800px;\n  padding: 1rem;\n  color: #ddd;\n`\n\nexport default Footer\n","import React, { Component } from 'react'\nimport Body from './components/Body'\nimport Header from './components/Header'\nimport Timer from './components/Timer'\nimport Control from './components/Control'\nimport Footer from './components/Footer'\n\nclass App extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      soundEnabled: true,\n      notificationsEnabled: true,\n      title: '4T',\n      subtitle: 'Twenty Twenty Twenty Timer'\n    }\n  }\n\n  changeSettings = event => {\n    let name = event.target.name\n    let isChecked = event.target.checked\n    let stateObject = () => {\n      let returnObject = {}\n      returnObject[name] = isChecked\n      return returnObject\n    }\n    this.setState(stateObject)\n  }\n\n  render () {\n    return (\n      <div className='App'>\n        <Body>\n          <Header title={this.state.title} subtitle={this.state.subtitle} />\n          <Timer\n            time='1200'\n            soundEnabled={this.state.soundEnabled}\n            notificationsEnabled={this.state.notificationsEnabled}\n          />\n          <div>\n            <Control\n              name='soundEnabled'\n              labelOn='Sound On'\n              labelOff='Sound Off'\n              isEnabled={this.state.soundEnabled}\n              changeSettings={this.changeSettings}\n            />\n            <Control\n              name='notificationsEnabled'\n              labelOn='Notifications On'\n              labelOff='Notifications Off'\n              isEnabled={this.state.notificationsEnabled}\n              changeSettings={this.changeSettings}\n            />\n          </div>\n          <Footer />\n        </Body>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}